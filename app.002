# Aplicação Flask com SQLAlchemy independente de banco de dados

import logging
import os
import pytz
import datetime
from dotenv import load_dotenv
from flask import Flask, render_template, redirect, request, current_app, has_app_context
from flask_scss import Scss
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy.orm import Mapped, mapped_column

# Carregar variáveis do arquivo .env
load_dotenv()

# Configuração do Logging
logging.basicConfig(level=logging.ERROR, format='%(asctime)s - %(levelname)s - %(message)s')

# My App –– IMPORTANTE: instance_relative_config=True
app = Flask(__name__, instance_relative_config=True)
Scss(app)

# Configurar caminho absoluto para o diretório 'instance' e o banco de dados
instance_path = os.path.join(app.root_path, 'instance')
database_path = os.path.join(instance_path, 'database.db')  # Caminho absoluto para o banco de dados

# Verificação e criação do diretório 'instance' se necessário, com verificação de permissões
if not os.path.exists(instance_path):
    try:
        os.makedirs(instance_path)
        print(f"Diretório 'instance' criado em {instance_path}")
    except OSError as e:
        print(f"Erro ao criar o diretório 'instance': {e}")
        exit(1)  # Encerra o aplicativo se o diretório não puder ser criado

# Verificar permissões do diretório 'instance'
if not os.access(instance_path, os.W_OK | os.R_OK):
    print(f"Erro: Sem permissão de leitura/escrita para o diretório {instance_path}")
    exit(1)

# Configuração do fuso horário para Recife
rec_timezone = pytz.timezone('America/Recife')

# Configuração do URI do banco de dados usando o caminho absoluto
DATABASE_URI = os.getenv("DATABASE_URI")
app.config["SQLALCHEMY_DATABASE_URI"] = DATABASE_URI
app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False

# Inicializa o banco de dados
db = SQLAlchemy(app)

def verifica_contexto():
    if has_app_context():
        print(f"Contexto do aplicativo ativo: {current_app.name}")
    else:
        print("Contexto do aplicativo não ativo.")

# Executa a verificação de contexto
with app.app_context():
    verifica_contexto()

verifica_contexto()  # Contexto não ativo fora do bloco

class MyTask(db.Model):
    __tablename__ = 'my_task'
    id: Mapped[int] = mapped_column(primary_key=True)
    content: Mapped[str] = mapped_column(db.String(100), nullable=False)
    complete: Mapped[int] = mapped_column(default=0)
    created: Mapped[datetime.datetime] = mapped_column(db.DateTime, default=datetime.datetime.now(tz=rec_timezone))

    def __repr__(self) -> str:
        return f"task {self.id}"

def create_database():
    with app.app_context():
        try:
            db.create_all()
            print("Banco de dados criado com sucesso ou já existente.")
        except Exception as e:
            print(f"Erro ao criar o banco de dados: {e}")
            exit(1)

# Verifica se o banco de dados SQLite precisa ser criado
if "sqlite" in DATABASE_URI and not os.path.exists(database_path):
    print("Banco de dados não encontrado. Criando o banco de dados SQLite.")
    create_database()

# Rotas do aplicativo

@app.route("/", methods=["POST", "GET"])
def index():
    if request.method == "POST":
        current_task = request.form['content']
        new_task = MyTask(content=current_task)
        try:
            db.session.add(new_task)
            db.session.commit()
            return redirect("/")
        except Exception as error:
            logging.error(f"Erro ao adicionar tarefa: {error}")
            return "Ocorreu um erro ao adicionar a tarefa.", 500
    else:
        tasks = MyTask.query.order_by(MyTask.created).all()
        return render_template('index.html', tasks=tasks)

@app.route("/delete/<int:id>")
def delete(id: int):
    delete_task = MyTask.query.get_or_404(id)
    try:
        db.session.delete(delete_task)
        db.session.commit()
        return redirect("/")
    except Exception as e:
        return f"ERROR:{e}"

@app.route("/edit/<int:id>", methods=["GET", "POST"])
def edit(id: int):
    task = MyTask.query.get_or_404(id)
    if request.method == "POST":
        task.content = request.form['content']
        try:
            db.session.commit()
            return redirect("/")
        except Exception as e:
            return f"ERROR:{e}"
    else:
        return render_template('edit.html', task=task)

if __name__ == "__main__":
    print(f"Executando o aplicativo a partir do diretório: {os.getcwd()}")
    app.run(debug=False, host='0.0.0.0', port=5100, threaded=True)
